@model PROJECT_CAREERCIN.Models.DTO.CompanyDashboardDTO
@{
    Layout = "_LayoutPerusahaan";
    ViewData["Title"] = "Dashboard Perusahaan";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
<style>
    /* Variabel CSS */
    :root {
        --primary: #4361ee;
        --primary-light: #4895ef;
        --primary-gradient: linear-gradient(135deg, var(--primary), var(--primary-light));
        --secondary: #3f37c9;
        --success: #4cc9f0;
        --success-rgb: 76, 201, 240;
        --danger: #f72585;
        --danger-rgb: 247, 37, 133;
        --warning: #f8961e;
        --warning-rgb: 248, 150, 30;
        --info: #4895ef;
        --info-rgb: 72, 149, 239;
        --dark: #212529;
        --light: #f8f9fa;
        --card-bg: #ffffff;
        --text-dark: #343a40;
        --text-light: #6c757d;
        --border-radius: 12px;
        --border-radius-sm: 8px;
        --box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        --box-shadow-hover: 0 8px 20px rgba(0, 0, 0, 0.12);
        --transition: all 0.3s ease;
        --transition-slow: all 0.5s ease;
    }

    /* Reset dan base styles */
    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }

    body {
        font-family: 'Poppins', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #f8fafc;
        color: var(--text-dark);
        line-height: 1.6;
        overflow-x: hidden;
    }

    .dashboard-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 20px;
        width: 100%;
    }

    .dashboard-header {
        margin-bottom: 24px;
        animation: fadeInUp 0.6s ease-out 0.2s both;
    }

        .dashboard-header h1 {
            font-size: 28px;
            font-weight: 700;
            color: var(--text-dark);
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .dashboard-header p {
            color: var(--text-light);
            font-size: 16px;
            max-width: 600px;
        }

    /* Action buttons */
    .action-buttons {
        display: flex;
        gap: 12px;
        margin-bottom: 24px;
        flex-wrap: wrap;
        animation: fadeInUp 0.6s ease-out 0.3s both;
    }

    .action-btn {
        padding: 12px 20px;
        border: none;
        border-radius: var(--border-radius);
        cursor: pointer;
        background: var(--primary-gradient);
        color: white;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        transition: var(--transition);
        font-weight: 500;
        font-size: 14px;
        text-decoration: none;
        box-shadow: 0 4px 10px rgba(67, 97, 238, 0.2);
        position: relative;
        overflow: hidden;
    }

        .action-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: var(--transition-slow);
        }

        .action-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 15px rgba(67, 97, 238, 0.3);
        }

            .action-btn:hover::before {
                left: 100%;
            }

        .action-btn i {
            font-size: 16px;
        }

    /* Grid layout untuk card */
    .card-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
        gap: 16px;
        margin-bottom: 24px;
        width: 100%;
    }

    /* Stat card styles */
    .stat-card {
        background: var(--card-bg);
        padding: 20px;
        border-radius: var(--border-radius);
        box-shadow: var(--box-shadow);
        text-align: center;
        transition: var(--transition);
        width: 100%;
        position: relative;
        overflow: hidden;
        border: none;
        animation: fadeInUp 0.6s ease;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 160px;
    }

        .stat-card::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 4px;
            background: var(--primary-gradient);
            transform: scaleX(0);
            transform-origin: left;
            transition: var(--transition);
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--box-shadow-hover);
        }

            .stat-card:hover::after {
                transform: scaleX(1);
            }

    .card-icon-wrapper {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 12px;
        position: relative;
    }

    .stat-card.primary .card-icon-wrapper {
        background-color: rgba(67, 97, 238, 0.1);
        color: var(--primary);
    }

    .stat-card.success .card-icon-wrapper {
        background-color: rgba(76, 201, 240, 0.1);
        color: var(--success);
    }

    .stat-card.warning .card-icon-wrapper {
        background-color: rgba(248, 150, 30, 0.1);
        color: var(--warning);
    }

    .stat-card.danger .card-icon-wrapper {
        background-color: rgba(247, 37, 133, 0.1);
        color: var(--danger);
    }

    .stat-card.info .card-icon-wrapper {
        background-color: rgba(72, 149, 239, 0.1);
        color: var(--info);
    }

    .stat-card.secondary .card-icon-wrapper {
        background-color: rgba(108, 117, 125, 0.1);
        color: #6c757d;
    }

    .card-icon {
        font-size: 20px;
    }

    .stat-card h3 {
        color: var(--text-light);
        margin-bottom: 8px;
        font-size: 12px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .stat-card .number {
        font-size: 24px;
        font-weight: 700;
        display: block;
        margin-bottom: 6px;
        background: var(--primary-gradient);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        transition: var(--transition);
    }

    .stat-card:hover .number {
        transform: scale(1.05);
    }

    .stat-card .label {
        font-size: 12px;
        color: var(--text-light);
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 4px;
    }

    .trend-up {
        color: #28a745;
    }

    .trend-down {
        color: #dc3545;
    }

    /* Main content grid */
    .main-content-grid {
        display: grid;
        grid-template-columns: 1fr;
        gap: 20px;
        margin-bottom: 24px;
    }

    @@media (min-width: 992px) {
        .main-content-grid {
            grid-template-columns: 1.5fr 1fr;
        }
    }

    /* Container styles */
    .recent-table {
        background: var(--card-bg);
        padding: 20px;
        border-radius: var(--border-radius);
        box-shadow: var(--box-shadow);
        width: 100%;
        overflow: hidden;
        border: none;
        animation: fadeInUp 0.8s ease;
        transition: var(--transition);
    }

        .recent-table:hover {
            box-shadow: var(--box-shadow-hover);
        }

    .chart-title {
        font-size: 18px;
        font-weight: 600;
        color: var(--text-dark);
        margin-bottom: 16px;
        padding-bottom: 12px;
        border-bottom: 1px solid #f0f4f8;
        display: flex;
        align-items: center;
        gap: 10px;
    }

        .chart-title i {
            color: var(--primary);
            background: rgba(67, 97, 238, 0.1);
            padding: 8px;
            border-radius: 10px;
            width: 34px;
            height: 34px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
        }

    /* Table styles */
    .table-responsive {
        overflow-x: auto;
        border-radius: var(--border-radius-sm);
    }

    table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
        margin-top: 12px;
    }

        table thead {
            background: var(--primary-gradient);
            color: white;
            border-radius: var(--border-radius-sm);
        }

        table th {
            padding: 14px 12px;
            text-align: left;
            font-weight: 600;
            font-size: 13px;
        }

            table th:first-child {
                border-top-left-radius: var(--border-radius-sm);
            }

            table th:last-child {
                border-top-right-radius: var(--border-radius-sm);
            }

        table td {
            padding: 12px;
            border-bottom: 1px solid #f0f4f8;
            font-size: 13px;
        }

        table tbody tr {
            transition: var(--transition);
        }

            table tbody tr:last-child td:first-child {
                border-bottom-left-radius: var(--border-radius-sm);
            }

            table tbody tr:last-child td:last-child {
                border-bottom-right-radius: var(--border-radius-sm);
            }

            table tbody tr:hover {
                background-color: rgba(67, 97, 238, 0.03);
                transform: translateX(2px);
            }

    .status {
        padding: 6px 12px;
        border-radius: 16px;
        font-size: 11px;
        font-weight: 600;
        display: inline-block;
    }

    .status-active {
        background-color: rgba(76, 201, 240, 0.15);
        color: var(--success);
    }

    .status-closed {
        background-color: rgba(108, 117, 125, 0.15);
        color: #6c757d;
    }

    /* Summary stats */
    .summary-stats {
        display: flex;
        flex-direction: column;
        gap: 16px;
    }

    .summary-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 14px 16px;
        background: #f8fafc;
        border-radius: var(--border-radius-sm);
        transition: var(--transition);
    }

        .summary-item:hover {
            background: #f0f4f8;
            transform: translateX(2px);
        }

    .summary-label {
        font-size: 13px;
        color: var(--text-light);
        font-weight: 500;
    }

    .summary-value {
        font-size: 16px;
        font-weight: 700;
        color: var(--primary);
    }

    /* Bottom chart container */
    .bottom-chart-container {
        background: var(--card-bg);
        padding: 20px;
        border-radius: var(--border-radius);
        box-shadow: var(--box-shadow);
        width: 100%;
        overflow: hidden;
        border: none;
        margin-top: 20px;
        animation: fadeInUp 1s ease;
        transition: var(--transition);
    }

        .bottom-chart-container:hover {
            box-shadow: var(--box-shadow-hover);
        }

    .chart-wrapper {
        position: relative;
        height: 300px;
        width: 100%;
    }

    /* Tabs untuk grafik */
    .chart-tabs {
        display: flex;
        gap: 6px;
        margin-bottom: 20px;
        border-bottom: 1px solid #f0f4f8;
        padding-bottom: 12px;
        overflow-x: auto;
        -ms-overflow-style: none;
        scrollbar-width: none;
    }

        .chart-tabs::-webkit-scrollbar {
            display: none;
        }

    .chart-tab {
        padding: 8px 16px;
        border-radius: 18px;
        background: #f8fafc;
        border: 1px solid #e9ecef;
        cursor: pointer;
        font-size: 13px;
        font-weight: 500;
        transition: var(--transition);
        white-space: nowrap;
    }

        .chart-tab.active {
            background: var(--primary-gradient);
            color: white;
            border-color: var(--primary);
            box-shadow: 0 3px 8px rgba(67, 97, 238, 0.2);
        }

        .chart-tab:hover:not(.active) {
            background: #e9ecef;
            transform: translateY(-1px);
        }

    /* Media queries untuk responsivitas */
    @@media (max-width: 1024px) {
        .dashboard-container {
            padding: 18px;
        }

        .card-container {
            grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
            gap: 14px;
        }
    }

    @@media (max-width: 768px) {
        .dashboard-container {
            padding: 16px;
        }

        .dashboard-header h1 {
            font-size: 24px;
        }

        .dashboard-header p {
            font-size: 14px;
        }

        .card-container {
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 12px;
        }

        .stat-card {
            padding: 18px 16px;
            min-height: 150px;
        }

            .stat-card .number {
                font-size: 22px;
            }

        .card-icon-wrapper {
            width: 45px;
            height: 45px;
            margin-bottom: 10px;
        }

        .card-icon {
            font-size: 18px;
        }

        .recent-table, .bottom-chart-container {
            padding: 18px 16px;
        }

        table th, table td {
            padding: 12px 10px;
            font-size: 12px;
        }

        .chart-tabs {
            margin-bottom: 16px;
            padding-bottom: 10px;
        }

        .chart-tab {
            font-size: 12px;
            padding: 6px 12px;
        }

        .chart-wrapper {
            height: 250px;
        }

        .main-content-grid {
            grid-template-columns: 1fr;
        }
    }

    @@media (max-width: 576px) {
        .action-buttons {
            flex-direction: column;
        }

        .action-btn {
            width: 100%;
            justify-content: center;
        }

        .dashboard-header h1 {
            font-size: 22px;
        }

        .card-container {
            grid-template-columns: 1fr;
        }

        .stat-card {
            min-height: 140px;
        }

        .summary-item {
            flex-direction: column;
            align-items: flex-start;
            gap: 6px;
        }

        .chart-wrapper {
            height: 220px;
        }

        .chart-title {
            font-size: 16px;
        }

            .chart-title i {
                width: 30px;
                height: 30px;
                font-size: 12px;
            }
    }

    /* Animations */
    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes pulse {
        0% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.03);
        }

        100% {
            transform: scale(1);
        }
    }

    /* Custom scrollbar */
    .table-responsive::-webkit-scrollbar {
        height: 6px;
    }

    .table-responsive::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 4px;
    }

    .table-responsive::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 4px;
    }

        .table-responsive::-webkit-scrollbar-thumb:hover {
            background: #a8a8a8;
        }

    /* No data state */
    .no-data {
        text-align: center;
        padding: 40px 16px;
        color: var(--text-light);
    }

        .no-data i {
            font-size: 40px;
            margin-bottom: 12px;
            opacity: 0.3;
        }

        .no-data p {
            font-size: 14px;
        }

    /* Stagger animations for cards */
    .stat-card:nth-child(1) {
        animation-delay: 0.1s;
    }

    .stat-card:nth-child(2) {
        animation-delay: 0.2s;
    }

    .stat-card:nth-child(3) {
        animation-delay: 0.3s;
    }

    .stat-card:nth-child(4) {
        animation-delay: 0.4s;
    }

    .stat-card:nth-child(5) {
        animation-delay: 0.5s;
    }

    .stat-card:nth-child(6) {
        animation-delay: 0.6s;
    }

    /* Loading animation */
    .loading-shimmer {
        background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
        background-size: 200% 100%;
        animation: loading 1.5s infinite;
        border-radius: var(--border-radius);
        min-height: 16px;
    }

    @@keyframes loading {
        0% {
            background-position: 200% 0;
        }

        100% {
            background-position: -200% 0;
        }
    }
</style>

<body>
    <!-- Dashboard Page -->
    <div class="dashboard-container">
        <div class="dashboard-header">
            <h1><i class="fas fa-tachometer-alt"></i> Dashboard Perusahaan</h1>
            <p>Kelola lowongan dan pantau aktivitas perusahaan Anda</p>
        </div>

        <!-- Statistik Cards -->
        <div class="card-container">
            <div class="stat-card primary">
                <div class="card-icon-wrapper">
                    <i class="fas fa-suitcase card-icon"></i>
                </div>
                <h3>Total Lowongan</h3>
                <span class="number">@Model.TotalLowongan</span>
                <div class="label">
                    <i class="fas fa-briefcase"></i>
                    <span>Lowongan aktif</span>
                </div>
            </div>

            <div class="stat-card success">
                <div class="card-icon-wrapper">
                    <i class="fas fa-users card-icon"></i>
                </div>
                <h3>Pelamar Aktif</h3>
                <span class="number">@Model.PelamarAktif</span>
                <div class="label">
                    <i class="fas fa-user-check"></i>
                    <span>Dalam proses</span>
                </div>
            </div>

            <div class="stat-card info">
                <div class="card-icon-wrapper">
                    <i class="fas fa-file-alt card-icon"></i>
                </div>
                <h3>Lamaran Baru</h3>
                <span class="number">@Model.LamaranBaru</span>
                <div class="label">
                    <i class="fas fa-inbox"></i>
                    <span>Hari ini</span>
                </div>
            </div>

            <div class="stat-card warning">
                <div class="card-icon-wrapper">
                    <i class="fas fa-calendar-week card-icon"></i>
                </div>
                <h3>Lamaran Minggu Ini</h3>
                <span class="number">@Model.LamaranMinggIni</span>
                <div class="label">
                    <i class="fas fa-chart-line"></i>
                    <span>7 hari terakhir</span>
                </div>
            </div>

            <div class="stat-card danger">
                <div class="card-icon-wrapper">
                    <i class="fas fa-check-circle card-icon"></i>
                </div>
                <h3>Lamaran Diterima</h3>
                <span class="number">@Model.LamaranDiterima</span>
                <div class="label">
                    <i class="fas fa-trophy"></i>
                    <span>Kandidat terpilih</span>
                </div>
            </div>

            <div class="stat-card secondary">
                <div class="card-icon-wrapper">
                    <i class="fas fa-clock card-icon"></i>
                </div>
                <h3>Lowongan Terbaru</h3>
                <span class="number">@Model.LowonganTerbaru</span>
                <div class="label">
                    <i class="fas fa-bolt"></i>
                    <span>1 jam terakhir</span>
                </div>
            </div>
        </div>

        <!-- Konten Utama - Tabel Lowongan -->
        <div class="main-content-grid">
            <div class="recent-table">
                <div class="chart-title">
                    <i class="fas fa-history"></i>
                    Lowongan Terbaru
                </div>
                <div class="table-responsive">
                    @if (Model.DaftarLowonganTerbaru != null && Model.DaftarLowonganTerbaru.Any())
                    {
                        <table>
                            <thead>
                                <tr>
                                    <th>Posisi</th>
                                    <th>Perusahaan</th>
                                    <th>Tanggal</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var lowongan in Model.DaftarLowonganTerbaru)
                                {
                                    <tr>
                                        <td>@lowongan.Posisi</td>
                                        <td>@lowongan.NamaPerusahaan</td>
                                        <td>@lowongan.TanggalDibuat.ToString("dd MMM yyyy")</td>
                                        <td>
                                            @{
                                                var statusClass = lowongan.status.ToString() == "Active" ? "status-active" : "status-closed";
                                            }
                                            <span class="status @statusClass">@lowongan.status</span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <div class="no-data">
                            <i class="fas fa-inbox"></i>
                            <p>Belum ada lowongan</p>
                        </div>
                    }
                </div>
            </div>

            <div class="recent-table">
                <div class="chart-title">
                    <i class="fas fa-chart-pie"></i>
                    Ringkasan Statistik
                </div>
                <div class="summary-stats">
                    <div class="summary-item">
                        <div class="summary-label">Total Lowongan Aktif</div>
                        <div class="summary-value">@Model.TotalLowongan</div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-label">Lamaran Bulan Ini</div>
                        <div class="summary-value">@Model.StatistikBulanan</div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-label">Rasio Diterima</div>
                        <div class="summary-value">
                            @{
                                var totalLamaran = Model.LamaranMinggIni > 0 ? Model.LamaranMinggIni : 1;
                                var rasioDiterima = (Model.LamaranDiterima * 100) / totalLamaran;
                            }
                            @rasioDiterima%
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Chart Container - DI BAWAH dan MEMANJANG -->
        <div class="bottom-chart-container">
            <div class="chart-title">
                <i class="fas fa-chart-bar"></i>
                Grafik Statistik Perusahaan
            </div>

            <div class="chart-tabs">
                <div class="chart-tab active" data-chart="lamaran">Trend Lamaran</div>
                <div class="chart-tab" data-chart="lowongan">Status Lowongan</div>
                <div class="chart-tab" data-chart="pelamar">Status Pelamar</div>
            </div>

            <div class="chart-wrapper">
                <canvas id="companyChart"></canvas>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.0/dist/chart.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Data untuk chart
            const grafikData = @Html.Raw(Json.Serialize(Model.GrafikLamaran));
            let companyChart = null;

            // Data statistik untuk chart lainnya
            const chartData = {
                lamaran: {
                    labels: grafikData && grafikData.length > 0 ?
                        grafikData.map(item => item.tanggal) :
                        ['Sen', 'Sel', 'Rab', 'Kam', 'Jum', 'Sab', 'Min'],
                    datasets: [{
                        label: 'Jumlah Lamaran',
                        data: grafikData && grafikData.length > 0 ?
                            grafikData.map(item => item.jumlah) :
                            [0, 0, 0, 0, 0, 0, 0],
                        backgroundColor: 'rgba(67, 97, 238, 0.8)',
                        borderColor: 'rgba(67, 97, 238, 1)',
                        borderWidth: 1,
                        borderRadius: 6,
                    }]
                },
                lowongan: {
                    labels: ['Aktif', 'Ditutup'],
                    datasets: [{
                        label: 'Status Lowongan',
                        data: [@Model.TotalLowongan, 0],
                        backgroundColor: [
                            'rgba(76, 201, 240, 0.8)',
                            'rgba(108, 117, 125, 0.8)'
                        ],
                        borderWidth: 1
                    }]
                },
                pelamar: {
                    labels: ['Diproses', 'Diterima'],
                    datasets: [{
                        label: 'Status Pelamar',
                        data: [@Model.PelamarAktif, @Model.LamaranDiterima],
                        backgroundColor: [
                            'rgba(67, 97, 238, 0.8)',
                            'rgba(40, 167, 69, 0.8)'
                        ],
                        borderWidth: 1
                    }]
                }
            };

            // Inisialisasi chart
            function initChart(chartType) {
                const ctx = document.getElementById('companyChart').getContext('2d');

                if (companyChart) {
                    companyChart.destroy();
                }

                const config = {
                    type: chartType === 'lowongan' || chartType === 'pelamar' ? 'doughnut' : 'bar',
                    data: chartData[chartType],
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'top',
                            },
                            tooltip: {
                                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                                titleFont: {
                                    size: 14
                                },
                                bodyFont: {
                                    size: 14
                                }
                            }
                        },
                        animation: {
                            duration: 2000,
                            easing: 'easeOutQuart'
                        }
                    }
                };

                // Tambahkan opsi khusus untuk chart batang
                if (chartType === 'lamaran') {
                    config.options.scales = {
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(0, 0, 0, 0.05)'
                            },
                            ticks: {
                                stepSize: 1
                            }
                        },
                        x: {
                            grid: {
                                display: false
                            }
                        }
                    };
                }

                companyChart = new Chart(ctx, config);
            }

            // Inisialisasi chart pertama
            initChart('lamaran');

            // Event listener untuk tabs
            document.querySelectorAll('.chart-tab').forEach(tab => {
                tab.addEventListener('click', function () {
                    // Hapus class active dari semua tabs
                    document.querySelectorAll('.chart-tab').forEach(t => {
                        t.classList.remove('active');
                    });

                    // Tambah class active ke tab yang diklik
                    this.classList.add('active');

                    // Ganti chart sesuai dengan tab yang dipilih
                    const chartType = this.getAttribute('data-chart');
                    initChart(chartType);
                });
            });

            // Animasi counter untuk statistik
            function animateValue(element, duration) {
                const el = document.querySelector(element);
                if (!el) return;

                const target = parseInt(el.textContent);
                if (isNaN(target)) return;

                let start = 0;
                const increment = target > 100 ? Math.floor(target / 50) : 1;
                const stepTime = Math.abs(Math.floor(duration / (target / increment)));

                const timer = setInterval(() => {
                    start += increment;
                    if (start >= target) {
                        el.textContent = target.toLocaleString();
                        clearInterval(timer);
                    } else {
                        el.textContent = start.toLocaleString();
                    }
                }, stepTime);
            }

            // Jalankan animasi counter untuk semua statistik
            animateValue('.stat-card.primary .number', 1000);
            animateValue('.stat-card.success .number', 1000);
            animateValue('.stat-card.info .number', 1000);
            animateValue('.stat-card.warning .number', 1000);
            animateValue('.stat-card.danger .number', 1000);
            animateValue('.stat-card.secondary .number', 1000);

            // Animasi hover pada card
            const cards = document.querySelectorAll('.stat-card');
            cards.forEach(card => {
                card.addEventListener('mouseenter', () => {
                    card.style.transform = 'translateY(-5px)';
                });

                card.addEventListener('mouseleave', () => {
                    card.style.transform = 'translateY(0)';
                });
            });
        });
    </script>
</body>